Introducción

variables 
alert, prompt, confirm
tipos de datos
Conversion de tipo, Operadores básicos matemáticas, object, cocatenación, conversión numérica

/* Como regla general, solo los scripts más simples se colocan en el HTML. Los más complejos residen en archivos separados. La ventaja de un archivo separado es que el navegador lo descargará y lo almacenará en caché. Otras páginas que hacen referencia al mismo script lo tomarán del caché en lugar de descargarlo, por lo que el archivo solo se descarga una vez. Eso reduce el tráfico y hace que las páginas sean más rápidas.
*/




VARIABLES 


//let user ='Phias', age = 22, message='hola'; 
let user ='Phias';
let age = 22;
let message='hola';

alert(message);
*/

// let unicamente puede incluir letrasm dígitos o $ y _ y no puede empezar con un dígito

//----------

//const myBirthday = 01-11-2002
// constante que no puede ser alterada

/* Existe una práctica utilizada ampliamente de utilizar constantes como aliases de valores difíciles-de-recordar, "solo con valores invariables preestablecidos"

const COLOR_RED = "#F00";
const COLOR_GREEN = "#0F0";
const COLOR_BLUE = "#00F";
const COLOR_ORANGE = "#FF7F00";

// ...cuando debemos elegir un color
let color = COLOR_ORANGE;
alert(color); // #FF7F00



const BIRTHDAY = '18.04.1982';

const age = someCode(BIRTHDAY);
*/


//----------------------------------------------------------------------------------
/* TIPOS DE DATOS */
/* 
let mesaage= 'hola';
mesaage=12345;

let n = 123;
n= 12.345;
 */

//----------

// operaciones= *   /   +   -
// valores numéricos especiales= Infinity, -Infinity y NaN=es un error de cálculo y cualquier operación sobre NaN devuelve NaN

// el entero mayor es =2^53-1 y el menor= -2^53-1... es una limitación técnica cuasada por su representanción interna.

//Para la mayoría de los propósitos es suficiente, pero a veces necesitamos números realmente grandes. Por ejemplo, para criptografía o marcas de tiempo de precisión de microsegundos.

//----------

/* BigInt */
// es para representar enteros de longitud arbitraria. y se le agrega "n" al final del entero.
// rara vez se usa y más que todo por su compatibilidad con IE
// const bigInt = 1234567890123456789012345678901234567890n;  // la n indica que es BigInt

/* 
let name = "John";

alert( `Hola, ${name}!` ); // Hola, John!

// esto solo se puede hacer con los brackticks (comillas invertidas)

alert( `el resultado es ${1 + 2}` ); //el resultado es 3 
*/

// las otras comillas no tienen la capacidad de hacer esto.


//-------

/* Boolean, verdadero o falso */
/* 
let isGreater = 4 > 1;

alert( isGreater ); // verdadero (el resultado de la comparación es "sí")
 */

// nulll= nulo


/* undefined es un valor no asignado.*/

/* let age;

alert(age); // muestra "undefined" */

// pero tambien se puede asignar a una variable pero es mejor null para eso

//----------------------------------------------------------------------------------

/* Object y Symbol */


/* Object se utilizan para almacenar colecciones de datos y entidades más complejas. */

//----------

/* Symbol se utiliza para crear identificadores únicos para los objetos */

//----------

/* typeof duevelve el tipo de argumento. Es útil cuando queremos procesar valores de diferentes tipos de forma diferente o simplemente queremos hacer una comprobación ràpida */

/* 
typeof 0 // "number"

typeof(0) // "number"

typeof 10n // "bigint"

typeof true // "boolean"
 */


//----------------------------------------------------------------------------------

/* alert, prompt, confirm */

// alert ya vista, muestra un mensaje al usuario hasta que presiones "Aceptar"
//muestra una ventana modal que no deja interactuar al usuaio con lo demás hasya que preciones aceptar

//----------

//prompt  acepta dos argumentos 
//muestra una venta nodal con un mensaje de texto, un capo de entrada para le visitante y los botones OK/CANCELAR.

/* 
result = prompt(title, [default]);
 */

// title el texto a mostrar al usuario
// default un segundo parámetro opcional, el valor inicial del campo de entrada.

// [] denotan en la sintaxis que el parámetro es opcional.


// prompt retorna el texto del campo de entrada o null si la entrada fue cancelada.

/* 
let age = prompt ('¿Cuántos años tienes?', 100);

alert(`Tienes ${age} años!`); //Tienes 100 años!
 */


/* ADVERTENCIA!!! ADVERTENCIA!!!

El segundo parámetro es opcional, pero si no lo proporcionamos, Internet Explorer insertará el texto "undefined" en el prompt.

let test = prompt("Test");
Por lo tanto, para que las indicaciones se vean bien en IE, recomendamos siempre proporcionar el segundo argumento:

let test = prompt("Test", ''); // <-- para IE
*/

//----------

/* confirm */
// confirm muestra una ventana modal con una pregunta y dos botes: ok=true y cancelar=false
/* 
let isBoss = confirm("¿Eres el jefe?");

alert( isBoss ); // true si se pulsa OK

 */

/* 
let name = prompt('¿Cúal es tu nombre?)', '' )
alert(`tu nombre es ${name}`)

 */



linea 211

/* CONVERSION DE TIPO */

// hay funciones que convierte automñaticamente los valores que les pasan al tipo correcto.
// alet convierte automáticamente cualquier valor a string para mostrarlo.

//----------

/* ToString */
// alert(value) para mostrar un valor como texto
/* 
let value = true;
alert(typeof value); // boolean

value = String(value); // ahora value es el string "true"
alert(typeof value); // string
 */

//----------

/* ToNumber */
// las conversiones numéricas ocurren automáticamente en funciones mateámticas y expresiones
/* 
alert( "6" / "2") // 3, los string son convertidos a números.

// para convertir explicitamente

let str = "123";
alert(typeof str); // string

let num = Number(str); // se convierte en 123

alert(typeof num); // number

 */


// la conversión explícita es requeeida usualmente cuando leemos un valor desde la fuente basada en texto, como lo son los campos de texto en los formularios, que esperamos que contengan un valor numérico. 
// si el str no es un número valido= NaN

/* 
let age = Number("un texto arbitrario en vez de un número");

alert(age); // NaN, conversión fallida
 */

// REGLAS DE CONVERSIÓN
/* 
undefined=NaN
null=0
true and false= 1 y 0
string= se eliminan los espacios del inicio y final del texto. Si el str resulta vacío, el resultado es 0
en caso contrario el número es: "leido" del str. Un error devuelve NaN
*/
/* 
alert( Number("   123   ") ); // 123
alert( Number("123z") );      // NaN (error al leer un número en "z")
alert( Number(true) );        // 1
alert( Number(false) );       // 0
 */

en concatenación de str en casi todas las operaciones matemáticas convierten valores a números, a excepción de la suma 
/* 
alert( 1 + '2' ); // '12' (string a la derecha)
alert( '1' + 2 ); // '12' (string a la izquierda)
 */

//----------

/* ToBoolean */
//los valores que son intuitivamente "vacíos", como 0, "", null, undefined, NaN, se convierten en false
//otros valores se convierten en True
/* 
alert( Boolean(1) ); // true
alert( Boolean(0) ); // false

alert( Boolean("hola") ); // true
alert( Boolean("") ); // false

alert( Boolean("0") ); // true
alert( Boolean(" ") ); // sólo espacios, también true (cualquier string no vacío es true)
 */



linea 298


//----------------------------------------------------------------------------------



/* Operadores básicos, matemática */

/* 
suma= +
resta= -
multiplicación= *
división= /
resto= %
exponenciación= **

mayor/menor= a>b  y a<b
mayor/menor o igual= a>=b   a<=b
exactamente= a == b
distinto= a != b
igualdad estricto= === comprueba la igualdad sin conversiones de tipo
diferencia estricta= !==
*/

//----------


/* cocatenación de cadenas con el binario + */
/* 
let s= "my" + "string";
alert(s); // mystring
 */
// si uno de los operados es una cadena, el otro tambien se convertira en cadena
/* 
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"
alert(2 + 2 + '1' ); // "41" y no "221"

alert('1' + 2 + 2); // "122", no es "14"
 */
// Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = "12" y "12" + 2 = "122".

//El binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.
/* 
alert( 2 - '1' ); // 1
alert( '6' / '2' ); // 3
 */

//----------


/* conversión numérica, unario + */
//La suma + existe en dos formas: la forma binaria que utilizamos arriba y la forma unaria. La suma + existe en dos formas: la forma binaria que utilizamos arriba y la forma unaria.

// Sin efecto en números
/* 
let x = 1;
alert( +x ); // 1

let y = -2;
alert( +y ); // -2

// Convierte los no números
alert( +true ); // 1
alert( +"" );   // 0
 */
// hace lo mismo que Number(...) pero es más corto.
/* 
let apples = "2";
let oranges = "3";

alert( apples + oranges ); // "23", el binario suma concatena las cadenas
 */

// si queremos tratarlos como números, se convierte y luego se suma
/* 
let apples = "2";
let oranges = "3";

// ambos valores convertidos a números antes del operador binario suma
alert( +apples + +oranges ); // 5

// la variante más larga
// alert( Number(apples) + Number(oranges) ); // 5
 */


 /* comparación con nulos en indefinidos */
// null e indefined son valores diferentes.
/* 
alert( null === undefined ); // false
 */

// pero para  omparación no estricta 

/* 
alert( null == undefined ); // true
*/

// pero para otras comparaciones < > >= <=, null se convierte en 0 y undefined en NaN
//undefined no debe compararse con otros valores.

// tratar cualquier comparación con undefined/null (excepto la ifualdad estricta ===) con sumo cuidado y no usar comparaciones con estos.
